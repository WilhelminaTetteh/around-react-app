{"ast":null,"code":"const authResponse = res => {\n  if (res) {\n    return res.json();\n  }\n\n  return Promise.reject(`Error: ${res.status}`);\n};\n\nexport const BASE_URL = \"https://register.nomoreparties.co\";\nexport const register = (email, password) => {\n  // your url will be different, of course\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(authResponse) // .then((response) => {\n  //   // if response returns 201-created, parse the data and return to next handler\n  //   if (response.status === 201) {\n  //     return response.json();\n  //   }\n  // })\n  .then(res => {\n    // return the parsed data to client, this data includes a unique, signed JWT\n    console.log(res);\n    return res;\n  });\n}; //Authorize User\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(authResponse).then(data => {\n    // does data have a jwt in it?\n    if (data.token) {\n      // if so, save it to local storage and return data\n      localStorage.setItem(\"jwt\", data.token);\n      return data;\n    }\n  });\n}; //  NOTE  we pass this route the token as a parameter, and use that token in the Authorization header\n\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(authResponse) // NOTE   received data will include user data, such as email\n  .then(data => {\n    return data;\n  });\n};","map":{"version":3,"sources":["/Users/wilhelminatetteh/Desktop/around-react-app/src/utils/auth.js"],"names":["authResponse","res","json","Promise","reject","status","BASE_URL","register","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","console","log","authorize","data","token","localStorage","setItem","getContent","Authorization"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,GAAD,IAAS;AAC5B,MAAIA,GAAJ,EAAS;AACP,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACD;;AAED,SAAOC,OAAO,CAACC,MAAR,CAAgB,UAASH,GAAG,CAACI,MAAO,EAApC,CAAP;AACD,CAND;;AAOA,OAAO,MAAMC,QAAQ,GAAG,mCAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,SACEC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC1BK,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFiB;AAM1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AANoB,GAAvB,CAAL,CAQGQ,IARH,CAQQjB,YARR,EASE;AACA;AACA;AACA;AACA;AACA;AAdF,GAeGiB,IAfH,CAeShB,GAAD,IAAS;AACb;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACA,WAAOA,GAAP;AACD,GAnBH,CADF;AAsBD,CAxBM,C,CA0BP;;AACA,OAAO,MAAMmB,SAAS,GAAG,CAACZ,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAN2B,GAAvB,CAAL,CAQJQ,IARI,CAQCjB,YARD,EASJiB,IATI,CASEI,IAAD,IAAU;AACd;AACA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACd;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,KAAjC;AACA,aAAOD,IAAP;AACD;AACF,GAhBI,CAAP;AAiBD,CAlBM,C,CAmBP;;AACA,OAAO,MAAMI,UAAU,GAAIH,KAAD,IAAW;AACnC,SACEZ,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AAC5BK,IAAAA,MAAM,EAAE,KADoB;AAE5BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB,kBAFT;AAGPa,MAAAA,aAAa,EAAG,UAASJ,KAAM;AAHxB;AAFmB,GAAzB,CAAL,CAQGL,IARH,CAQQjB,YARR,EASE;AATF,GAUGiB,IAVH,CAUSI,IAAD,IAAU;AACd,WAAOA,IAAP;AACD,GAZH,CADF;AAeD,CAhBM","sourcesContent":["const authResponse = (res) => {\n  if (res) {\n    return res.json();\n  }\n\n  return Promise.reject(`Error: ${res.status}`);\n};\nexport const BASE_URL = \"https://register.nomoreparties.co\";\n\nexport const register = (email, password) => {\n  // your url will be different, of course\n  return (\n    fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    })\n      .then(authResponse)\n      // .then((response) => {\n      //   // if response returns 201-created, parse the data and return to next handler\n      //   if (response.status === 201) {\n      //     return response.json();\n      //   }\n      // })\n      .then((res) => {\n        // return the parsed data to client, this data includes a unique, signed JWT\n        console.log(res);\n        return res;\n      })\n  );\n};\n\n//Authorize User\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  })\n    .then(authResponse)\n    .then((data) => {\n      // does data have a jwt in it?\n      if (data.token) {\n        // if so, save it to local storage and return data\n        localStorage.setItem(\"jwt\", data.token);\n        return data;\n      }\n    });\n};\n//  NOTE  we pass this route the token as a parameter, and use that token in the Authorization header\nexport const getContent = (token) => {\n  return (\n    fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then(authResponse)\n      // NOTE   received data will include user data, such as email\n      .then((data) => {\n        return data;\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}