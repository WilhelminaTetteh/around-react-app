{"ast":null,"code":"var authResponse=function authResponse(res){if(res){return res.json();}return Promise.reject(\"Error: \".concat(res.status));};export var BASE_URL=\"https://register.nomoreparties.co\";export var register=function register(email,password){// your url will be different, of course\nreturn fetch(\"\".concat(BASE_URL,\"/signup\"),{method:\"POST\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(authResponse)// .then((response) => {\n//   // if response returns 201-created, parse the data and return to next handler\n//   if (response.status === 201) {\n//     return response.json();\n//   }\n// })\n.then(function(res){// return the parsed data to client, this data includes a unique, signed JWT\nconsole.log(res);return res;});};//Authorize User\nexport var authorize=function authorize(email,password){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:\"POST\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(authResponse).then(function(data){// does data have a jwt in it?\nif(data.token){// if so, save it to local storage and return data\nlocalStorage.setItem(\"jwt\",data.token);return data;}});};//  NOTE  we pass this route the token as a parameter, and use that token in the Authorization header\nexport var getContent=function getContent(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:\"GET\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(token)}}).then(authResponse)// NOTE   received data will include user data, such as email\n.then(function(data){return data;});};","map":{"version":3,"sources":["/Users/wilhelminatetteh/Desktop/around-react-app/src/utils/auth.js"],"names":["authResponse","res","json","Promise","reject","status","BASE_URL","register","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","console","log","authorize","data","token","localStorage","setItem","getContent","Authorization"],"mappings":"AAAA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,GAAD,CAAS,CAC5B,GAAIA,GAAJ,CAAS,CACP,MAAOA,CAAAA,GAAG,CAACC,IAAJ,EAAP,CACD,CAED,MAAOC,CAAAA,OAAO,CAACC,MAAR,kBAAyBH,GAAG,CAACI,MAA7B,EAAP,CACD,CAND,CAOA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,mCAAjB,CAEP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAQC,QAAR,CAAqB,CAC3C;AACA,MACEC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CAC1BK,MAAM,CAAE,MADkB,CAE1BC,OAAO,CAAE,CACPC,MAAM,CAAE,kBADD,CAEP,eAAgB,kBAFT,CAFiB,CAM1BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAER,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CANoB,CAAvB,CAAL,CAQGQ,IARH,CAQQjB,YARR,CASE;AACA;AACA;AACA;AACA;AACA;AAdF,CAeGiB,IAfH,CAeQ,SAAChB,GAAD,CAAS,CACb;AACAiB,OAAO,CAACC,GAAR,CAAYlB,GAAZ,EACA,MAAOA,CAAAA,GAAP,CACD,CAnBH,CADF,CAsBD,CAxBM,CA0BP;AACA,MAAO,IAAMmB,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACZ,KAAD,CAAQC,QAAR,CAAqB,CAC5C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CACjCK,MAAM,CAAE,MADyB,CAEjCC,OAAO,CAAE,CACPC,MAAM,CAAE,kBADD,CAEP,eAAgB,kBAFT,CAFwB,CAMjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAER,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CAN2B,CAAvB,CAAL,CAQJQ,IARI,CAQCjB,YARD,EASJiB,IATI,CASC,SAACI,IAAD,CAAU,CACd;AACA,GAAIA,IAAI,CAACC,KAAT,CAAgB,CACd;AACAC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAA4BH,IAAI,CAACC,KAAjC,EACA,MAAOD,CAAAA,IAAP,CACD,CACF,CAhBI,CAAP,CAiBD,CAlBM,CAmBP;AACA,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACH,KAAD,CAAW,CACnC,MACEZ,CAAAA,KAAK,WAAIJ,QAAJ,cAAyB,CAC5BK,MAAM,CAAE,KADoB,CAE5BC,OAAO,CAAE,CACPC,MAAM,CAAE,kBADD,CAEP,eAAgB,kBAFT,CAGPa,aAAa,kBAAYJ,KAAZ,CAHN,CAFmB,CAAzB,CAAL,CAQGL,IARH,CAQQjB,YARR,CASE;AATF,CAUGiB,IAVH,CAUQ,SAACI,IAAD,CAAU,CACd,MAAOA,CAAAA,IAAP,CACD,CAZH,CADF,CAeD,CAhBM","sourcesContent":["const authResponse = (res) => {\n  if (res) {\n    return res.json();\n  }\n\n  return Promise.reject(`Error: ${res.status}`);\n};\nexport const BASE_URL = \"https://register.nomoreparties.co\";\n\nexport const register = (email, password) => {\n  // your url will be different, of course\n  return (\n    fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    })\n      .then(authResponse)\n      // .then((response) => {\n      //   // if response returns 201-created, parse the data and return to next handler\n      //   if (response.status === 201) {\n      //     return response.json();\n      //   }\n      // })\n      .then((res) => {\n        // return the parsed data to client, this data includes a unique, signed JWT\n        console.log(res);\n        return res;\n      })\n  );\n};\n\n//Authorize User\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  })\n    .then(authResponse)\n    .then((data) => {\n      // does data have a jwt in it?\n      if (data.token) {\n        // if so, save it to local storage and return data\n        localStorage.setItem(\"jwt\", data.token);\n        return data;\n      }\n    });\n};\n//  NOTE  we pass this route the token as a parameter, and use that token in the Authorization header\nexport const getContent = (token) => {\n  return (\n    fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then(authResponse)\n      // NOTE   received data will include user data, such as email\n      .then((data) => {\n        return data;\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}